-- Create Database
CREATE DATABASE IF NOT EXISTS RetailDB;
USE RetailDB;

-- Drop existing tables (for re-runs)
DROP TABLE IF EXISTS Orders, Customers, Products, Categories, Employees;

-- Create Tables
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    city VARCHAR(50),
    signup_date DATE
);

CREATE TABLE Employees (
    employee_id INT PRIMARY KEY AUTO_INCREMENT,
    employee_name VARCHAR(100),
    department VARCHAR(50),
    hire_date DATE
);

CREATE TABLE Categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(100)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    price DECIMAL(10, 2),
    category_id INT,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    product_id INT,
    employee_id INT,
    quantity INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (employee_id) REFERENCES Employees(employee_id)
);

-- Insert Data
INSERT INTO Customers (customer_name, email, city, signup_date) VALUES
('Ravi Verma', 'ravi@gmail.com', 'Delhi', '2022-01-15'),
('Sneha Singh', 'sneha@yahoo.com', 'Mumbai', '2022-03-22'),
('Amit Kumar', 'amit@gmail.com', 'Bangalore', '2021-11-30'),
('Neha Sharma', 'neha@gmail.com', 'Chennai', '2022-05-10');

INSERT INTO Employees (employee_name, department, hire_date) VALUES
('Pooja Mehta', 'Sales', '2021-01-10'),
('Rajesh Iyer', 'Support', '2020-03-20');

INSERT INTO Categories (category_name) VALUES
('Electronics'),
('Groceries'),
('Clothing');

INSERT INTO Products (product_name, price, category_id) VALUES
('Smartphone', 15000.00, 1),
('Laptop', 50000.00, 1),
('Rice Bag', 1200.00, 2),
('T-shirt', 499.00, 3);

INSERT INTO Orders (customer_id, product_id, employee_id, quantity, order_date) VALUES
(1, 1, 1, 2, '2023-01-10'),
(2, 2, 2, 1, '2023-02-15'),
(1, 3, 1, 5, '2023-02-20'),
(3, 4, 1, 3, '2023-03-05'),
(4, 2, 2, 1, '2023-04-10');

-- Sample View
CREATE VIEW CustomerOrders AS
SELECT c.customer_name, o.order_id, p.product_name, o.quantity, o.order_date
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
JOIN Products p ON o.product_id = p.product_id;

-- Sample Stored Procedure
DELIMITER //
CREATE PROCEDURE GetCustomerOrders(IN cust_id INT)
BEGIN
    SELECT o.order_id, p.product_name, o.quantity, o.order_date
    FROM Orders o
    JOIN Products p ON o.product_id = p.product_id
    WHERE o.customer_id = cust_id;
END //
DELIMITER ;


-- Q1. Retrieve all customers from ‘Delhi’.


-- Q2. Show product names with price greater than ₹1,000.

-- Q3. Display the order details along with customer and product name for orders placed in February 2023.


-- Q4. How many orders did each customer place? Show customer name and number of orders.


-- Q5. Find the total revenue generated by each product.


-- Q6. List top 3 customers based on total revenue they generated


-- Q7. Write a query to show each employee’s name and the total quantity of items they sold.


-- Q8. Use a window function to assign a rank to products based on quantity sold.


-- Q9. Use the view CustomerOrders to find how many orders each customer placed.


-- Q10. Use the stored procedure GetCustomerOrders to retrieve all orders for customer ID = 2.
